#+TITLE: Frogmacs Cofig
#+AUTHOR: AdventureOfE
#+DESCRIPTION: frogmacs config
#+STARTUP: overview
#+OPTIONS: toc:2

* TABLE OF CONTENTS                                                     :toc:
- [[#startup][STARTUP]]
- [[#lsp][LSP]]
- [[#elpaca][ELPACA]]
- [[#exwm][EXWM]]
  - [[#system_try][SYSTEM_TRY]]
- [[#key_bindings][KEY_BINDINGS]]
  - [[#evil][EVIL]]
  - [[#sudo_edit][SUDO_EDIT]]
  - [[#general][GENERAL]]
  - [[#zooming-in--out][ZOOMING IN / OUT]]
  - [[#make-esc-quit-prompts][MAKE ESC QUIT PROMPTS]]
- [[#default_emacs_settings][DEFAULT_EMACS_SETTINGS]]
  - [[#disable-toolbars][DISABLE TOOLBARS]]
  - [[#fancy_lambda_symbols_etc][FANCY_LAMBDA_SYMBOLS_ETC]]
  - [[#conservative-scrolling][CONSERVATIVE SCROLLING]]
  - [[#inhibit_startup_guff][INHIBIT_STARTUP_GUFF]]
- [[#yasnippet][YASNIPPET]]
- [[#which-key][WHICH-KEY]]
- [[#org-mode][ORG MODE]]
  - [[#enable-table-of-contents][ENABLE TABLE OF CONTENTS]]
  - [[#org-bullets][ORG BULLETS]]
  - [[#disable-electric-indent][DISABLE ELECTRIC INDENT]]
  - [[#evil_org][EVIL_ORG]]
  - [[#org_roam][ORG_ROAM]]
- [[#ivy-counsel][IVY (COUNSEL)]]
  - [[#counsel][COUNSEL]]
  - [[#ivy][IVY]]
  - [[#ivy-rich-all-the-icons][IVY RICH ALL THE ICONS]]
  - [[#ivy-rich][IVY RICH]]
- [[#visuals][VISUALS]]
  - [[#rainbow-delimiters][RAINBOW DELIMITERS]]
  - [[#all-the-icons][ALL THE ICONS]]
  - [[#doom-modeline][DOOM MODELINE]]
  - [[#theme-for-now][THEME FOR NOW]]
- [[#treemacs][TREEMACS]]
- [[#eshell][ESHELL]]
- [[#test-function-stop-emacs-backups][test function stop emacs backups]]

* STARTUP
#+BEGIN_SRC emacs-lisp
;; make garbage collection happen fewer times
  (setq gc-cons-threshold (* 100 1000 1000))
  
;;print startup info
(add-hook 'emacs-startup-hook
      #'(lambda ()
          (message "Startup in %s with %d garbage collections"
          (emacs-init-time "%.2f")
          gcs-done)))
#+END_SRC 
* LSP
#+BEGIN_SRC emacs-lisp
(setq read-process-output-max (* 1024 1024))
#+END_SRC 
* ELPACA
#+BEGIN_SRC emacs-lisp
    (defvar elpaca-installer-version 0.5)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				  :ref nil
				  :files (:defaults (:exclude "extensions"))
				  :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	   (build (expand-file-name "elpaca/" elpaca-builds-directory))
	   (order (cdr elpaca-order))
	   (default-directory repo))
      (add-to-list 'load-path (if (file-exists-p build) build repo))
      (unless (file-exists-p repo)
	(make-directory repo t)
	(when (< emacs-major-version 28) (require 'subr-x))
	(condition-case-unless-debug err
	    (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		     ((zerop (call-process "git" nil buffer t "clone"
					   (plist-get order :repo) repo)))
		     ((zerop (call-process "git" nil buffer t "checkout"
					   (or (plist-get order :ref) "--"))))
		     (emacs (concat invocation-directory invocation-name))
		     ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					   "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		     ((require 'elpaca))
		     ((elpaca-generate-autoloads "elpaca" repo)))
		(progn (message "%s" (buffer-string)) (kill-buffer buffer))
	      (error "%s" (with-current-buffer buffer (buffer-string))))
	  ((error) (warn "%s" err) (delete-directory repo 'recursive))))
      (unless (require 'elpaca-autoloads nil t)
	(require 'elpaca)
	(elpaca-generate-autoloads "elpaca" repo)
	(load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca `(,@elpaca-order))
  (elpaca-no-symlink-mode)

    ;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)
#+END_SRC
* EXWM
#+BEGIN_SRC emacs-lisp
      (defun efs/exwm-update-class ()
          (exwm-workspace-rename-buffer exwm-class-name))

      (use-package exwm
      :config
      (setq exwm-workspace-number 4)

      (setq exwm-input-prefixkeys
      '(?\C-x
      ?\C-u
      ?\C-h
      ?\M-x
      ?\M-`
      ?\M-&
      ?\M-:
      ?\C-\M-j
      ?\C-\ ))

    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Rebind CapsLock to Ctrl
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.config/emacs/Xmodmap")

    (setq exwm-input-global-keys
     `(
         ([?\s-r] . exwm-reset)
         ([s-left] . windmove-left)
         ([s-right]. windmove-right)

         ([?\s-&] . (lambda (command)
                   (interactive (list (read-shell-command "$ ")))
                   (start-process-shell-command command nil command)))))

    (exwm-enable))
#+END_SRC
** SYSTEM_TRY
#+BEGIN_SRC emacs-lisp
    (start-process-shell-command "xrandr" nil" xrandr --output DVI-D-0 --primary --mode 1920x1080 --pos 1920x0 --rotate normal --output HDMI-0 --mode 1920x1080 --pos 0x0 --rotate normal --output DP-0 --off --output DP-1 --off --output DVI-D-1 --off --output None-1-1 --off")
#+END_SRC
* WHICH-KEY
#+BEGIN_SRC emacs-lisp
  (use-package which-key
      :init
      (which-key-mode 1)
      :config
      (setq which-key-side-window-location 'bottom
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-max-display-columns nil
      which-key-min-display-lines 6
      which-key-side-window-slot -10
      which-key-side-window-max-height 0.25
      which-key-idle-delay 0
      which-key-max-description-length 70
      which-key-allow-imprecise-window-fit t
      which-key-separator " → "))

* KEY_BINDINGS
** EVIL
#+BEGIN_SRC emacs-lisp
      ;; Expands to: (elpaca evil (use-package evil :demand t))
      (use-package evil
        :init ;;tweak evil's config before loading
          (setq evil-want-integration t) ;; this is optional since already set to true
          (setq evil-want-keybinding nil)
          (setq evil-vsplit-window-right t)
          (setq evil-split-window-below t)
           (setq evil-want-C-i-jump nil)
          (evil-mode) 
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state))
       (use-package evil-collection
          :after evil
          :config
          (setq evil-collection-mode-list '(dashboard dired ibuffer))
          (evil-collection-init))
       (use-package evil-tutor)

      ;;Turns off elpaca-use-package-mode current declartion
      ;;Note this will cause the declaration to be interpreted immediately (not deferred).
      ;;Useful for configuring built-in emacs features.
      (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

      ;; Don't install anything. Defer execution of BODY
      (elpaca nil (message "deferred"))
#+END_SRC
** SUDO_EDIT
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit)
#+END_SRC 
** GENERAL
*** GENERAL FUNCTIONS
#+BEGIN_SRC emacs-lisp
  (defun web-url(site)
      (browse-url-firefox  (concat (concat "https://www." site) ".com"))
  )

  (defun web-map(site)
      (browse_url-firefox (concat "https://www.google.com/maps/place/" site))
  )
#+END_SRC
*** GENERAL CODE
#+BEGIN_SRC emacs-lisp
  (use-package general
            :config
            (general-evil-setup)

            ;;setup up 'SPC' as global leader key
            (general-create-definer frog/frogkey
                :states '(normal insert visual emacs)
                :keymaps 'override
                :prefix "SPC" ;; set leader
                :global-prefix "M-SPC") ;;access leader in insert mode

            (frog/frogkey
                "c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "config")
                  )

                (frog/frogkey
                    "w" '(:ignore t :wk "web")
                        "w c" '(:ignore t: :wk "calculator")
                            "w c g" '((lambda () (interactive) (browse-url-firefox "https://www.desmos.com/calculator")) :wk "GRAPH (Desmos)")
                            "w c a" '((lambda () (interactive) (browse-url-firefox "https://www.mathpapa.com/algebra-calculator.html")) :wk "ALGEBRAIC (MathPapa)")
                            "w c s" '((lambda () (interactive) (browse-url-firefox "https://www.desmos.com/scientific")) :wk "SCIENTIFIC (Desmos)")
                            "w c d" '((lambda () (interactive) (browse-url-firefox "https://www.derivative-calculator.net/")) :wk "DERIVATIVE")
                            "w c i" '((lambda () (interactive) (web_url "integral-calculator")) :wk "INTEGRAL")
                          "w s" '(:ignore t :wk "search")
                            "w s b" '((lambda () (interactive)  (web-url "bing")) :wk "bing")
                            "w s g" '((lambda () (interactive)  (web-url "google")) :wk "google")
                            "w s y" '((lambda () (interactive)  (web-url "yahoo")) :wk "yahoo")
                            "w s a" '((lambda () (interactive)  (web-url "ask")) :wk "ask")
                            "w s w" '((lambda () (interactive)  (web-url "wolframalpha")) :wk "wolframalpha")
                          "w m" '(:ignore t :wk "map") 
                            "w m e" '((lambda () (interactive) (web-map "Edinburgh/@55.9374557,-3.2320027,12.58z/data=!4m6!3m5!1s0x4887b800a5982623:0x64f2147b7ce71727!8m2!3d55.953252!4d-3.188267!16zL20vMDJtNzc?entry=ttu")) :wk "Edinburgh")
                            "w m c" '((lambda () (interactive) (web-map "Cork,+Ireland/@51.8920291,-8.4904324,13.29z/data=!4m6!3m5!1s0x4844900891beb961:0xa00c7a99731c5d0!8m2!3d51.8985143!4d-8.4756035!16zL20vMGNsejc?entry=ttu")) :wk "Cork")
                            "w m b" '((lambda () (interactive) (web-map "Brodick,+Isle+of+Arran/@55.571722,-5.1568557,14.29z/data=!4m6!3m5!1s0x4889ef17b640882b:0xd45d3cc92e0190dc!8m2!3d55.575111!4d-5.1451992!16zL20vMDFoMHlx?entry=ttu")) :wk "Broddick")
                            "w m d" '((lambda () (interactive) (web-map "Londonderry/@55.0046343,-7.337616,13.29z/data=!4m6!3m5!1s0x485fdde434d09363:0xbd21fa2ac755f32f!8m2!3d54.9964705!4d-7.3101359!16zL20vMDJoZ3o?entry=ttu")) :wk "Derry")
                            "w m g" '((lambda () (interactive) (web-map "Glasgow/@55.8554326,-4.314858,12z/data=!3m1!4b1!4m6!3m5!1s0x488815562056ceeb:0x71e683b805ef511e!8m2!3d55.8616704!4d-4.2583345!16zL20vMGh5eHY?entry=ttu")) :wk "Glasgow")
                            "w m k" '((lambda () (interactive) (web-map "Krak%C3%B3w,+Poland/@50.0499695,19.9217039,12.29z/data=!4m6!3m5!1s0x471644c0354e18d1:0xb46bb6b576478abf!8m2!3d50.0646501!4d19.9449799!16zL20vMDQ5MXk?entry=ttu")) :wk "Krakow")
                            "w m l" '((lambda () (interactive) (web-map "London/@51.5285262,-0.2664025,11z/data=!3m1!4b1!4m6!3m5!1s0x47d8a00baf21de75:0x52963a5addd52a99!8m2!3d51.5072178!4d-0.1275862!16zL20vMDRqcGw?entry=ttu")) :wk "London")
                            "w m m" '((lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/place/Munich,+Germany/@48.1548813,11.4594359,12z/data=!3m1!4b1!4m6!3m5!1s0x479e75f9a38c5fd9:0x10cb84a7db1987d!8m2!3d48.1351253!4d11.5819805!16s%2Fm%2F02h6_6p?entry=ttu")) :wk "Munich")
                            "w m n" '((lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/place/New+York,+NY,+USA/@40.6973709,-74.144487,11z/data=!3m1!4b1!4m6!3m5!1s0x89c24fa5d33f083b:0xc80b8f06e177fe62!8m2!3d40.7127753!4d-74.0059728!16zL20vMDJfMjg2?entry=ttu")) :wk "New York")
                            "w m s" '((lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/place/Singapore/@1.2721199,103.7638976,11z/data=!4m6!3m5!1s0x31da11238a8b9375:0x887869cf52abf5c4!8m2!3d1.352083!4d103.819836!16zL20vMDZ0MnQ?entry=ttu")) :wk "Singapore")
                            "w m v" '((lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/place/Venice,+Metropolitan+City+of+Venice,+Italy/@45.3887121,12.2710662,11.29z/data=!4m6!3m5!1s0x477eb1daf1d63d89:0x7ba3c6f0bd92102f!8m2!3d45.4408474!4d12.3155151!16zL20vMDdfcGY?entry=ttu")) :wk "Venice")
                            "w m y" '((lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/place/Tokyo,+Japan/@35.6506813,139.4448989,10.17z/data=!4m6!3m5!1s0x605d1b87f02e57e7:0x2e01618b22571b89!8m2!3d35.6764225!4d139.650027!16zL20vMDdkZms?entry=ttu")) :wk "Tokyo")
          )
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
      (use-package general
	  :config
	  (general-evil-setup)

	  ;;setup up 'SPC' as global leader key
	  (general-create-definer frog/leader-keys
	    :states '(normal insert visual emacs)
	    :keymaps 'override
	    :prefix "SPC" ;; set leader
	    :global-prefix "M-SPC") ;;access leader in insert mode

	   (frog/leader-keys
	   "b" '(:ignore t :wk "BUFFER")
	   "b b" '(counsel-switch-buffer :wk "Switch buffer")
	   "b i" '(ibuffer :wk "Ibuffer")
	   "b k" '(kill-this-buffer :wk "Kill this buffer")
	   "b n" '(next-buffer :wk "Next buffer")
	   "b p" '(previous-buffer :wk "Previous buffer")
	   "b r" '(revert-buffer :wk "Reload buffer"))

	   (frog/leader-keys
	   "e" '(:ignore t :wk "EVALUATE")
	   "e b" '(eval-buffer :wk "evaluate elisp buffer")
	   "e d" '(eval-defun :wk "eval defun containng or after point")
	   "e e" '(eval-expression :wk "eval elisp expression")
	   "e l" '(eval-last-sexp :wk "eval elisp before point")
	   "e r" '(eval-region :wk "eval elisp in region"))

	   (frog/leader-keys
	   "h" '(:ignore t :wk "HELP")
	   "h f" '(describe-function :wk "describe function")
	   "h v" '(describe-variable :wk "describe variable")
	   "h u" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :wk "Update Emacs init"))

	   (frog/leader-keys
	   "t" '(:ignore t :wk "TOGGLE")
	    "t n" '(display-line-numbers-mode :wk "Toggle line numbers")
	    "t l" '(visual-line-mode :wk "Toggle Truncated lines")
	    "t t" '(treemacs :wk "Toggle treemacs"))

	   (frog/leader-keys
	   "n" '(:ignore t :wk "NAVIGATE")
	   "n c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "config.org")
	   "n h" '((lambda () (interactive) (find-file "x:/projects/windows/home.org")) :wk "home.org"))

	   (frog/leader-keys
	   "f" '(:ignore t :wk "FIND")
	   "f f" '(counsel-find-file :wk "find file")
	   "f s" '(sudo-edit-find-file :wk "sudo find file")
	   "f r" '(counsel-recentf :wk "find recent file"))

	   (frog/leaders/keys
	   "o" '(:ignore t :wk "OPEN")
	   "o g" '(lambda () (interactive) (browse-url-firefox "https://www.google.co.uk")) :wk "google")
	   "o b" '(lambda () (interactive) (browse-url-firefox "https://www.bing.com")) :wk "bing")
	   "o d" '(lambda () (interactive) (browse-url-firefox "https://www.duckduckgo.com")) :wk "duckduckgo"))
	   "o m" '(:ignore t :wk "MAP")
	   "o m g" '(lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/@55.8497232,-4.2828747,11z?entry=ttu")) :wk "Glasgow")
	   "o m l" '(lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/@51.4787528,-0.185164,10.29z?entry=ttu")) :wk "London")
	   "o m d" '(lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/@54.9955762,-7.3196228,13.17z?entry=ttu")) :wk "Derry")
	   "o m n" '(lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/@40.7940507,-73.9560524,11.04z?entry=ttu")) :wk "New York")
	   "o m t" '(lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/@35.5094471,139.8045077,9.92z?entry=ttu")) :wk "Tokyo")
	   "o m m" '(lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/@48.1110477,11.5731642,11.46z?entry=ttu")) :wk "Munich")
	   "o m s" '(lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/@30.8699794,121.0211044,8.87z?entry=ttu")) :wk "Shanghai")
	   "o m k" '(lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/@22.5566423,88.3518627,11.29z?entry=ttu")) :wk "Kolkata")
	   "o m r" '(lambda () (interactive) (browse-url-firefox "https://www.google.com/maps/@41.8456475,12.512021,10.58z?entry=ttu")) :wk "Rome"))
    )
#+END_SRC
** ZOOMING IN / OUT
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+END_SRC 
** MAKE ESC QUIT PROMPTS
#+BEGIN_SRC emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC 
* DEFAULT_EMACS_SETTINGS
** DISABLE TOOLBARS
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)   
  (scroll-bar-mode -1)
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC
** FANCY_LAMBDA_SYMBOLS_ETC
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC
** CONSERVATIVE SCROLLING
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC 
** INHIBIT_STARTUP_GUFF
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+END_SRC 
* YASNIPPET
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))
#+END_SRC
* ORG MODE
** ENABLE TABLE OF CONTENTS
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC
** ORG BULLETS
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC 
** DISABLE ELECTRIC INDENT
#+BEGIN_SRC emacs-lisp
(electric-indent-mode -1)
#+END_SRC 
** EVIL_ORG
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
** ORG_ROAM
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/RoamNotes")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i"    . completion-at-point))
  :config
  (org-roam-setup))
#+END_SRC 
* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for emacs
+ Counsel, a collection of Ivy-enhacned versions of common emacs commands
+ Ivy-rich allows us to add descriptions alongside the commnads in M-x
** COUNSEL
#+BEGIN_SRC emacs-lisp
    (use-package counsel
  :after ivy
  :config (counsel-mode))
#+END_SRC
** IVY
#+BEGIN_SRC emacs-lisp
(use-package ivy
:bind
;; ivy-resume resumes last ivy-based completion
(("C-c C-r" . ivy_resume)
("C-x B" . ivy-switch-buffer-other-window))
:custom
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
(setq enable-recursive-minibuffers t)
:config
(ivy-mode))
#+END_SRC
** IVY RICH ALL THE ICONS
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))
#+END_SRC 
** IVY RICH
#+BEGIN_SRC emacs-lisp
 (use-package ivy-rich
    :ensure t
    :after (:all ivy counsel)
    :init (setq ivy-rich-parse-remote-file-path t)
    :config (ivy-rich-mode 1))
#+END_SRC 
* VISUALS
** RAINBOW DELIMITERS
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC 
** ALL THE ICONS
This is an icon set that can be used with dired, ibuffer and other emacs programs
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
#+END_SRC 
*** all the icons dired
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
:hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+END_SRC 
** DOOM MODELINE
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+END_SRC 
** THEME FOR NOW
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-dracula t))
#+END_SRC 
* TREEMACS
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
  :ensure t)
#+END_SRC 
* ESHELL
#+BEGIN_SRC emacs-lisp
(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+END_SRC
