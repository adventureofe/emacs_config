#+TITLE:FROGMACS_LAPTOP
#+AUTHOR: adventureofe
#+DESCRIPTION: FOR WINDOW EMACS
#+STARTUP: overview
* USE_PACKAGE
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))
#+END_SRC
* ABSOLUTE_ESSENTIALS_DEFAULTS
** MAKE ESC QUIT PROMPTS
#+BEGIN_SRC emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
** ZOOMING IN / OUT
I always want  ctrl plus, ctrl minus and ctrl scrollwheel to zoom
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+END_SRC  
** DISABLE TOOLBARS
the toolbars are all essentially useless just learn the commands
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)   
  (scroll-bar-mode -1)
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC
** INHIBIT_STARTUP_GUFF
just start the editor, I don't need anything else
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+END_SRC 
** CONSERVATIVE SCROLLING
stops emacs scrolling being so jumpy
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 10000)
#+END_SRC 
** FANCY_LAMBDA_SYMBOLS_ETC
makes emacs display the lambda keyword as the fancy λ symbol in python.
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC
** TAB_WIDTH
should always be 4 spaces wide
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)

;; treat camelcase as separate words
(global-subword-mode 1)
#+END_SRC
** VISUAL_BELL
makes emacs flash when you try and go past the top or bottom of file
#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC
** SHORT_ANSWERS_FOR_CONFIRMATION
you only need to hit y or n, not type "yes" or "no" for everything
#+BEGIN_SRC emacs-lisp
  (setq use-short-answers t)
#+END_SRC
** NO_BLINKY_CURSOR
I don't like my cursor being invisible half the time
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
#+END_SRC
** BRACKET_MATCHING
highlighting a bracket also highlights it's matching bracket
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)
#+END_SRC
** LINE NUMBERS
I want line numbers in programming buffers
#+BEGIN_SRC emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
** ENSURE_UTF8_ENCODING
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC
* BACKUPS
I use version control. I don't need backup files everywhere
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/MyEmacsBackups")))
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
* ABSOLUTE_ESSENTIALS_PACKAGES
I can't live without these. Putting these first in an attempt to have them load even if
something crashes in the config
** EVIL
using vi keybindings in emacs for best of both worlds 
#+BEGIN_SRC emacs-lisp
  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
	:ensure t
	:demand t
	:init ;;tweak evil's config before loading
	(setq evil-want-integration t) ;; this is optional since already set to true
	(setq evil-want-keybinding nil)
	(setq evil-vsplit-window-right t)
	(setq evil-split-window-below t)
	(setq evil-want-C-i-jump nil)
	(evil-mode) 
	(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state))

  (use-package evil-collection
	:ensure t
	:demand t
	:after evil
	:config
	(setq evil-collection-mode-list '(dashboard dired ibuffer))
	(evil-collection-init))

  (use-package evil-tutor
	:ensure t
	:demand t
	:after evil
	)

  (use-package evil-org
	:ensure t
	:demand t
	:after org
	:hook (org-mode . (lambda () evil-org-mode))
	:config
	(require 'evil-org-agenda)
	(evil-org-agenda-set-keys))
#+END_SRC
** THEME
what a lovely future retro colour theme
#+BEGIN_SRC emacs-lisp
  (use-package cyberpunk-theme
	:ensure t
	:demand t
	:init (load-theme 'cyberpunk t))
#+END_SRC 

#+BEGIN_SRC emacs-lisp
  (defun my-set-foreground-color (&optional frame)
  "Set custom foreground color."
  (with-selected-frame (or frame (selected-frame))
    (set-foreground-color "green")))

;; Run later, for client frames...
(add-hook 'after-make-frame-functions 'my-set-foreground-color)
;; ...and now, for the initial frame.
(my-set-foreground-color)
#+END_SRC
** ORG
*** BULLETS
fancy bullets instead of a string of asterisks is real nice
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
	:ensure t
	:demand t
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** DOOM MODELINE
the doom modeline is such a vast improvement over the default modeline
both visually and functionally
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :demand t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+END_SRC
* WHICH_KEY
Taken directly from emacs from scratch by Daviwil
makes it so you can actually see what commands are available to you
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :demand t
    :diminish which-key-mode
    :init
    (which-key-mode)
    :config
    (setq which-key-idle-delay 0.5))
#+END_SRC
* COMPANY_MODE
Taken directly from emacs from scratch by Daviwil

Company Mode provides a nicer in-buffer completion interface than completion-at-point which is more reminiscent of what you would expect from an IDE. We add a simple configuration to make the keybindings a little more useful (TAB now completes the selection and initiates completion at the current location if needed).

We also use company-box to further enhance the look of the completions with icons and better overall presentation.

#+BEGIN_SRC emacs-lisp
  ;; to solve conflicts between company, yasnippet and tabbing
  (defun company-yasnippet-or-completion ()
    (interactive)
    (let ((yas-fallback-behavior nil))
      (unless (yas-expand)
        (call-interactively #'company-indent-or-complete-common))))


      (use-package company
        :after lsp-mode
        :ensure t
        :demand t
        :hook lsp-mode
        :bind (:map company-active-map
                    ;; complete by pressing tab
                    ("<tab>" . company-yasnippet-or-completion)
                    ;; make it vimmy
                    ("C-j" . company-select-next)
                    ("C-k" . company-select-previous))
        (:map lsp-mode-map
              ("<tab>" . company-yasnippet-or-completion))
        :custom
        (company-minimum-prefix-length 1)
        ;;had issues with the x server crashing when using typescript lsp and this being at 0.1
        ;;changed it but don't know if that was the root cause yet
        (company-idle-delay 0.8))

      ;; company-box for a modern UI
  ;; makes a little box of completions
    (use-package company-box
      :ensure t
      :demand t
      :hook company-mode
      :custom-face
      (company-tooltip ((t (:inherit default :background "#000000"))))
      (company-tooltip-selection ((t (:inherit font-lock-function-name-face :background "#666666"))))
      (company-tooltip-common ((t (:inherit font-lock-constant-face))))
      (company-tooltip-annotation ((t (:inherit font-lock-builtin-face))))
      (company-scrollbar-bg ((t (:background "#444444"))))
      (company-scrollbar-fg ((t (:background "#888888")))))
#+END_SRC
* YASNIPPET
my preferred snippets system
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :demand t
    :init
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    :config
    (yas-global-mode 1))
#+END_SRC
* FLYCHECK
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :ensure t
  :demand t
  :init (global-flycheck-mode))
#+END_SRC
* PROGRAMMING_MODES
** TYPESCRIPT
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :demand t
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 4))
#+END_SRC
